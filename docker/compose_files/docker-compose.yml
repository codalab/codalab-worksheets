version: '3.5'

x-non-blocking-logging: &non-blocking-logging
  driver: json-file
  options:
    mode: non-blocking

x-codalab-env: &codalab-env
  - CODALAB_HOME=${CODALAB_HOME}
  - CODALAB_USERNAME=${CODALAB_USERNAME}
  - CODALAB_PASSWORD=${CODALAB_PASSWORD}
  - CODALAB_MYSQL_HOST=${CODALAB_MYSQL_HOST}
  - CODALAB_MYSQL_PORT=${CODALAB_MYSQL_PORT}
  - CODALAB_MYSQL_DATABASE=${CODALAB_MYSQL_DATABASE}
  - CODALAB_MYSQL_USERNAME=${CODALAB_MYSQL_USERNAME}
  - CODALAB_MYSQL_PASSWORD=${CODALAB_MYSQL_PASSWORD}
  - CODALAB_ADMIN_EMAIL=${CODALAB_ADMIN_EMAIL}
  - CODALAB_EMAIL_HOST=${CODALAB_EMAIL_HOST}
  - CODALAB_EMAIL_USERNAME=${CODALAB_EMAIL_USERNAME}
  - CODALAB_EMAIL_PASSWORD=${CODALAB_EMAIL_PASSWORD}

# Properties that every service inherits.
x-codalab-base: &codalab-base
  environment:
    *codalab-env
  logging:
    *non-blocking-logging
  user: ${CODALAB_UID}
  networks:
    - service

# We mostly want to run in user mode when we need to save files to disk.
# But if we don't, easier to run as root.
x-codalab-root: &codalab-root
  user: 0:0

# Services that need direct access to disk.
x-codalab-server: &codalab-server
  volumes:
  - "${CODALAB_HOME}:${CODALAB_HOME}"
  - "${CODALAB_BUNDLE_STORE}:${CODALAB_BUNDLE_STORE}"
  - "${CODALAB_MONITOR_DIR}:${CODALAB_MONITOR_DIR}"

############################################################

services:
  rest-server:
    image: codalab/server:${CODALAB_VERSION}
    command: cl server
    <<: *codalab-base
    <<: *codalab-server

  bundle-manager:
    image: codalab/server:${CODALAB_VERSION}
    command: cl bundle-manager
    <<: *codalab-base
    <<: *codalab-server

  frontend:
    image: codalab/frontend:${CODALAB_VERSION}
    command: serve -s build -l ${CODALAB_FRONTEND_PORT}
    <<: *codalab-base
    <<: *codalab-root

  nginx:
    image: nginx:1.12.0
    command: nginx
    <<: *codalab-base
    <<: *codalab-root
    ports:
      - ${CODALAB_HTTP_PORT}:${CODALAB_HTTP_PORT}
    volumes:
      - ./files/nginx.conf:/etc/nginx/nginx.conf:ro

  mysql:
    # https://hub.docker.com/_/mysql
    image: mysql:5.5.53
    <<: *codalab-base
    environment:
      - MYSQL_ROOT_PASSWORD=${CODALAB_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${CODALAB_MYSQL_DATABASE}
      - MYSQL_USER=${CODALAB_MYSQL_USERNAME}
      - MYSQL_PASSWORD=${CODALAB_MYSQL_PASSWORD}
    volumes:
      - ${CODALAB_MYSQL_MOUNT}:/var/lib/mysql

  worker:
    image: codalab/worker:${CODALAB_VERSION}
    command: cl-worker --server http://rest-server:${CODALAB_REST_PORT} --verbose --work-dir ${CODALAB_WORKER_DIR} --network-prefix ${CODALAB_WORKER_NETWORK_NAME}
    <<: *codalab-base
    <<: *codalab-root  # Not ideal since worker files saved as root, but without it, can't use docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CODALAB_WORKER_DIR}:${CODALAB_WORKER_DIR}
    networks:
      - service
      - worker

  monitor:
    image: codalab/server:${CODALAB_VERSION}
    command: python monitor.py --log-path ${CODALAB_MONITOR_DIR}/monitor.log --backup-path ${CODALAB_MONITOR_DIR}
    <<: *codalab-base
    depends_on:
      - rest-server
    volumes:
      - /var/lib/docker:/var/lib/docker
      - ${CODALAB_HOME}:${CODALAB_HOME}
      - ${CODALAB_MONITOR_DIR}:${CODALAB_MONITOR_DIR}

networks:
  worker:
    name: ${CODALAB_WORKER_NETWORK_NAME}
    internal: True
  service:
